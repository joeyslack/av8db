var autocomplete;

function initAutocomplete() {
    autocomplete = new google.maps.places.Autocomplete((document.getElementById('job_location')), {
        types: ['geocode']
    });
    autocomplete.addListener('place_changed', fillInAddress)
}

function fillInAddress() {
    var place = autocomplete.getPlace();
    if (!place.geometry) {
        window.alert("Autocomplete's returned place contains no geometry");
        return
    } else {
        address1 = address2 = city1 = city2 = state = country = postal_code = '';
        formatted_address = place.formatted_address;
        latitude = place.geometry.location.lat();
        longitude = place.geometry.location.lng();
        var arrAddress = place.address_components;
        $.each(arrAddress, function(i, address_component) {
            if (address_component.types[0] == "route") {
                address1 = address_component.long_name
            }
            if (address_component.types[0] == "sublocality") {
                address2 = address_component.long_name
            }
            if (address_component.types[0] == "locality") {
                city1 = address_component.long_name
            }
            if (address_component.types[0] == "administrative_area_level_2") {
                city2 = address_component.long_name
            }
            if (address_component.types[0] == "administrative_area_level_1") {
                state = address_component.long_name
            }
            if (address_component.types[0] == "country") {
                country = address_component.long_name
            }
            if (address_component.types[0] == "postal_code") {
                postal_code = address_component.long_name
            }
        });
        $("#formatted_address").val(formatted_address);
        $("#address1").val(address1);
        $("#address2").val(address2);
        $("#country").val(country);
        $("#state").val(state);
        $("#city1").val(city1);
        $("#city2").val(city2);
        $("#postal_code").val(postal_code);
        $("#latitude").val(latitude);
        $("#longitude").val(longitude)
    }
}
var autocomp_opt = {
    source: function(request, response) {
        var input = this.element;
        $("#company_id").val("");
        $("#industry_dd_container").removeClass("hidden");
        $("#company_size_dd_container").removeClass("hidden");
        $("#job_location_dd_container").addClass("hidden");
        $("#job_location_container").removeClass("hidden");
        $.ajax({
            url: SITE_URL + "getCompany",
            type: "POST",
            minLength: 2,
            dataType: "json",
            data: {
                action: 'getCompanies',
                company_name: request.term
            },
            success: function(data) {
                response($.map(data, function(item) {
                    return {
                        label: item.company_name,
                        value: item.company_name,
                        id: item.company_id
                    }
                }))
            }
        })
    },
    select: function(event, c) {
        company_id = c.item.id;
        $("#company_id").val(company_id);
        $("#industry_dd_container").addClass("hidden");
        $("#company_size_dd_container").addClass("hidden");
        $("#job_location_container").addClass("hidden");
        $("#job_location_dd_container").removeClass("hidden");
        $.ajax({
            url: SITE_URL + "getJobLocations",
            type: "POST",
            dataType: "json",
            data: {
                action: 'getCompanyLocations',
                company_id: $("#company_id").val()
            },
            success: function(data) {
                $("#job_location_id").html(data);
                $("#job_location_id").prepend('<option value="">job locations</option>');
                $('.bootstrap-dropdowns').selectpicker('refresh')
            }
        })
    },
    autoFocus: !0
};
$(document).ready(function() {
    $("#company_name").autocomplete(autocomp_opt);
    $(".bootstrap-dropdowns").selectpicker('refresh');
    $("#is_headline_container").fadeOut(1000);
    $("#password_tooltip").hide()
});
$(document).on('change', "#is_current", function() {
    var ischecked = $(this).is(':checked');
    if (!ischecked) {
        $("#to_date_container").fadeIn(1000);
        $("#is_headline_container").fadeOut(1000)
    } else {
        $("#to_date_container").fadeOut(1000);
        $("#is_headline_container").fadeIn(1000)
    }
});
jQuery.validator.addMethod("name_vaild", function(value, element) {
    //return this.optional(element) || /^[\w.]+$/i.test(value)
    return /^[a-zA-Z0-9][a-zA-Z0-9\'\_\s]*$/.test(value);
}, "Letters, numbers,quote and underscores only please");
$("#signup_form").validate({
    ignore: [],
    rules: {
        first_name: {
            name_vaild: !0,
            required: !0,
            minlength: 2,
            maxlength: 25,
        },
        last_name: {
            name_vaild: !0,
            required: !0,
            minlength: 2,
            maxlength: 25,
        },
        signup_email_address: {
            required: !0,
            checkEmail: !0,
            remote: {
                url: SITE_URL + "checkIfEmailExists",
                async: !1,
                type: "POST"
            }
        },
        signup_password: {
            required: !0,
            minlength: 6,
            maxlength: 40
        },
        terms_conditions: {
            required: !0,
        },       
        "hiddenRecaptcha": {
            required: function() {
                if (grecaptcha.getResponse() == '') {
                    return !0
                } else {
                    return !1
                }
            }
        }
    },
    
    messages: {
        first_name: {
            required: lang.ERROR_SIGNUP_ENTER_YOUR_FIRST_NAME,
            minlength: lang.ERROR_SIGNUP_FIRST_NAME_MINIMUM_CHARACHTERS,
            maxlength: lang.ERROR_SIGNUP_FIRST_NAME_MAXIMUM_CHARACHTERS
        },
        last_name: {
            required: lang.ERROR_FEEDBACK_LAST_NAME,
            minlength: lang.ERROR_SIGNUP_LAST_NAME_MINIMUM_CHARACHTERS,
            maxlength: lang.ERROR_SIGNUP_LAST_NAME_MAXIMUM_CHARACHTERS
        },
        signup_email_address: {
            required: lang.ERROR_FORGOT_ENTER_EMAIL_ADDRESS,
            checkEmail: lang.LBL_ENTER_VALID_EMAIL,
            remote: lang.LBL_EMAIL_EXIST
        },
        signup_password: {
            required: lang.LBL_ENTER_PASS,
            minlength: lang.ERROR_SIGNUP_PASSWORD_MINMUM,
            maxlength: lang.ERROR_SIGNUP_PASSWORD_MAXIMUM,
        }, 
        terms_conditions: {
            required: lang.LBL_CHECK_TERMS_CONDITIONS,
        },        
        hiddenRecaptcha: {
            required: lang.PROVE_NOT_ROBOT,
        }
    },
    submitHandler: function(form) {
        if ($(form).valid()) {
            return !0
        } else {
            return !1
        }
    }
});
$("#signup_form").ajaxForm({
    beforeSend: function() {
        //$(".loader").show()
    },
    uploadProgress: function(event, position, total, percentComplete) {},
    success: function(html, statusText, xhr, $form) {
        obj = $.parseJSON(html);
        if (obj.status) {
            $("#signup_form")[0].reset();
            //grecaptcha.reset();
            $("#signup").prop("disabled", !1);
            toastr.success(obj.success)
        } else {
            toastr.error(obj.error)
        }
    },
    complete: function(xhr) {
        $(".loader").fadeOut();
        return !1
    }
});
$(document).on('click', ".loginWithSocialMedia", function(e) {
    e.preventDefault();
    var url = $(this).attr('href');
    var width = 626;
    var height = 436;
    var l = window.screenX + (window.outerWidth - width) / 2;
    var t = window.screenY + (window.outerHeight - height) / 2;
    var winProps = ['width=' + width, 'height=' + height, 'left=' + l, 'top=' + t, 'status=no', 'resizable=yes', 'toolbar=no', 'menubar=no', 'scrollbars=yes'].join(',');
    $.oauthpopup({
        path: url,
        windowOptions: winProps,
        callback: function() {
            window.location.reload()
        }
    });
    e.preventDefault()
});
$.oauthpopup = function(options) {
    options.windowName = options.windowName || 'ConnectWithOAuth';
    options.windowOptions = options.windowOptions || 'location=0,status=0,width=' + options.width + ',height=' + options.height + ',scrollbars=1';
    options.callback = options.callback || function() {
        window.location.reload()
    };
    var that = this;
    that._oauthWindow = window.open(options.path, options.windowName, options.windowOptions);
    that._oauthInterval = window.setInterval(function() {
        if (that._oauthWindow.closed) {
            window.clearInterval(that._oauthInterval);
            options.callback()
        }
    }, 1000)
};

function login() {
    FB.login(function(response) {
        if (response.authResponse) {
            getUserData()
        }
    }, {
        scope: 'email,public_profile',
        return_scopes: !0
    })
}

function getUserData() {
    FB.api('/me', {
        locale: 'en_US',
        fields: 'name, email, gender'
    }, function(response) {
        var data = [];
        data.name = response.name;
        data.email = response.email;
        data.gender = response.gender;
        data.provider = 'Facebook';
        $.ajax({
            method: 'post',
            url: SITE_URL + 'modules-nct/social-login-nct/fb_process.php',
            data: response,
            dataType: 'json',
            success: function(data) {
                window.location.href = data.url
            }
        })
    })
}
window.fbAsyncInit = function() {
    FB.init({
        appId: FB_APP_ID,
        xfbml: !0,
        version: 'v2.2'
    })
};
(function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) {
        return
    }
    js = d.createElement(s);
    js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs)
}(document, 'script', 'facebook-jssdk'));
$(document).on("click", ".search-entity-selection-li", function() {
    var selected_entity_class = $(this).find(".search-entity-selection i").attr("class");
    $("#search_selected_entity").attr("class", selected_entity_class);
    $("#selected_entity_container").attr("data-entity", $(this).find(".search-entity-selection").data('entity'))
});
$(document).on("submit", "#header_search_form", function(e) {
    e.preventDefault();
    var urlParam = {};
    var search_entity = $("#selected_entity_container").attr("data-entity");
    if ($("#keyword").val().trim() != "") {
        urlParam.keyword = $("#keyword").val()
    } else {
        delete urlParam.keyword
    }
    var newurlParam = jQuery.extend({}, urlParam);
    delete newurlParam.search_type;
    var newParam = decodeURIComponent($.param(newurlParam));
    if (newParam != '') {
        var url = SITE_URL + 'search/' + search_entity + '?' + newParam
    } else {
        var url = SITE_URL + 'search/' + search_entity
    }
    window.location = url
});
var gaia_initPasswordStrengthMeter = function(ratingMessages) {
    var inputHolders = [];
    inputHolders.passwd = $("#signup_password");
    $(document).on('keyup', "#signup_password", inputHandler);
    $(document).on('focus', "#signup_password", inputHandler);
    $(document).on('focusout', "#signup_password", function() {
        $("#password_tooltip").hide()
    });

    function inputHandler() {
        $("#password_tooltip").show();
        if ($("#signup_password").val().length == 0) {
            var message = document.getElementById('passwdRating');
            message.innerHTML = '';
            updatePasswordBar(5)
        } else if ($("#signup_password").val().length < 6) {
            updatePasswordBar(0)
        } else {
            CheckPasswordStrength($("#signup_password").val())
        }
    }

    function CheckPasswordStrength(password) {
        if (password.length == 0) {
            updatePasswordBar(0)
        }
        var regex = new Array();
        regex.push("[A-Z]");
        regex.push("[a-z]");
        regex.push("[0-9]");
        regex.push("[$@$!%*#?&]");
        var passed = 0;
        for (var i = 0; i < regex.length; i++) {
            if (new RegExp(regex[i]).test(password)) {
                passed++
            }
        }
        if (passed > 2 && password.length > 8) {
            passed++
        }
        var color = "";
        var strength = "";
        switch (passed) {
            case 0:
            case 1:
                updatePasswordBar(1);
                break;
            case 2:
                updatePasswordBar(2);
                break;
            case 3:
            case 4:
                updatePasswordBar(3);
                break;
            case 5:
                updatePasswordBar(4);
                break
        }
    }

    function updatePasswordBar(rating) {
        var ratingClasses = new Array(6);
        ratingClasses[0] = 'short';
        ratingClasses[1] = 'weak';
        ratingClasses[2] = 'fair';
        ratingClasses[3] = 'good';
        ratingClasses[4] = 'strong';
        ratingClasses[5] = 'notRated';
        var bar = document.getElementById('strength-bar');
        if (bar) {
            var message = document.getElementById('passwdRating');
            var barLength = document.getElementById('passwdBar').clientWidth;
            bar.className = ratingClasses[rating];
            if (rating >= 0 && rating <= 4) {
                bar.style.width = (barLength * (parseInt(rating) + 1.0) / 5.0) + 'px';
                message.innerHTML = ratingMessages[rating]
            } else {
                bar.style.width = 0;
                rating = 5
            }
        }
    }
};
gaia_initPasswordStrengthMeter(["Too short", "Weak", "Fair", "Good", "Strong", "Not rated"])